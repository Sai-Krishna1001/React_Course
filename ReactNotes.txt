Q. What Exactly is React? and why would we use it?
A. ReactJs is a declarative, efficient and flexible Javascript library for building fast and interactive user interfaces.

-->React do not have built-in solution for handling Routing, HttpCore etc.
-->React is front-end JavaScript library and used for building 
component based user interfaces UI.
--> It is maintained by Facebook.

Q. Why would we learn React?
A. 	1. Market Demand
	2. High Performance(speed)
	-->Internally, React uses some clever techniques to minimize the number 	of costly DOM operations that is required to update the UI
	-->It can change data over time without having to reload the page
	3. Strong Engineering Team(meta)
	4. Large community and Popularity(w3 schools, etc)

-->Components are one of the basic building blocks of React.

Q. What is a Component?
A.  

Q. How do we pass data from componentA to componentB?
A. In React, data can be passed from one component(ComponentA) to another component(ComponentB) through the use of props. Props(short for properties) are a way to pass data from a parent component to its child components.

--> props(properties): It is an object that stores the value of an attribute of a tag.
--> props are immutable.

Q. What is a Hook?
A. Hooks allow us to "hook" into React features such as state and lifecycle methods.

Hook Rules
============
--> Hooks can only be called inside React function components.
--> Hooks can only be called at the top level of a component.
--> Hooks cannot be eConditional

Note: Hooks will not work in React class components.

--> useState -- for managing component state
--> useEffect -- for handling side effects
--> useContext -- for accessing context values
--> useRef -- for accessing and manipulating DOM elements.

--> The 'useContext' hook is used ot consume the value from a React
context. Context providesa a way to pass data through the component tree 
without having to pass props manually at every level. It allows components
to access data or share state without the need for prop drilling.



--> The main difference between 'OnClick' and 'onChange' lies in the purpose and 
associated elements. 'onClick' is used to handle click interactions with various HTML elements, while 'onChange' is 
primarily used with input elements to capture and respond to changes in their values.

--> 'setTimeout' triggers the execution of a function once after a specified delay,
while 'setInterval' triggers the execution of a function repeatedly at a specified interval 
until explicitly stopped. 

--> The 'onSubmit' event is triggered when a form is submitted, either by clicking a submit button or by pressing the Enter key while focussed on an input field within the form.

=================REDUX IN REACTJS=========================
--> It is all about Managing state values in multiple components at
a time, using redux store 

--> Dependencies to be installed for Redux 
	--> npm install redux 
	--> npm install react-redux 
	--> npm install redux-thunk 

--> mapStateToProps: Function that you would use to provide the store data to your component.
--> mapDispatchToprops: It is use to provide the action creators as props to your component.

Q. What is JSX in React.js?
A.	--> JSX stands for Javascript XML.
	--> JSX allows us to write HTML in React.
	eg: const tag = <h1> text </h1>

Q. What is useContext hook?
A. useContext hook allows passing data to children elements without using redux.

Q. What is redux in react?
A. Redux is an open-source Javascript library and used to manage state values globally.

Q. What is Redux Thunk in React?
A. Redux Thunk middleware allows you to write action creators that return
	a function instead of an action.

Q. What is the use of React Hooks?
A. Hooks are functions use to manage both React State and lifecycle 
	features from function components.

	--> Hooks don't work inside classes!

Q. What is mounting and unmounting in React?
A. 	Mounting is the process of outputting or additional component to the DOM.
	Unmounting is the process of removing or blocking them from the DOM.

Q. Which DOM is faster in react?
A.	Virtual DOM is extremely faster because it is an abstraction of the HTML DOM and lightweight.
	Real DOM is bit slower because of update the content, structure, and style of a document.

Q. 


	
